apiVersion: v1
kind: ConfigMap
metadata:
  name: contact-api-config
data:
  app.py: |
    from fastapi import FastAPI, HTTPException
    from fastapi.responses import JSONResponse
    from fastapi.middleware.cors import CORSMiddleware
    import boto3
    import os
    import time
    import logging
    from datetime import datetime
    from botocore.exceptions import ClientError
    import uuid

    # Configure logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    # Initialize FastAPI app
    app = FastAPI(title="Contact Form API", version="1.0.0")

    # Add CORS middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["GET", "POST", "OPTIONS"],
        allow_headers=["*"],
    )

    # Initialize AWS clients
    region = os.environ.get('AWS_REGION', 'ap-southeast-1')
    ses = boto3.client('ses', region_name=region)
    dynamodb = boto3.resource('dynamodb', region_name=region)

    def get_dynamo_table(table_name):
        return dynamodb.Table(table_name)

    @app.get("/")
    def read_root():
        return {"message": "Contact Form API is running!", "version": "1.0.0"}

    @app.get("/health")
    def health_check():
        try:
            contacts_table = os.environ.get('CONTACTS_TABLE', 'realistic-demo-pretamane-contact-submissions')
            table = dynamodb.Table(contacts_table)
            table.load()
            return {"status": "healthy", "timestamp": datetime.utcnow().isoformat() + 'Z'}
        except Exception as e:
            logger.error(f"Health check failed: {str(e)}")
            raise HTTPException(status_code=503, detail="Service unhealthy")

    @app.post("/contact")
    async def submit_contact(request: dict):
        try:
            body = request
            timestamp = datetime.utcnow().isoformat() + 'Z'
            unique_id = str(uuid.uuid4())[:8]
            
            contact_item = {
                'id': f"contact_{int(time.time())}_{unique_id}",
                'name': body.get('name', ''),
                'email': body.get('email', ''),
                'message': body.get('message', ''),
                'timestamp': timestamp,
                'status': 'new'
            }
            
            contacts_table = os.environ.get('CONTACTS_TABLE', 'realistic-demo-pretamane-contact-submissions')
            table = get_dynamo_table(contacts_table)
            table.put_item(Item=contact_item)
            
            return {
                'message': 'Contact form submitted successfully!',
                'contactId': contact_item['id'],
                'timestamp': timestamp
            }
            
        except Exception as e:
            logger.error(f"Error: {str(e)}")
            raise HTTPException(status_code=500, detail="Internal server error")

    if __name__ == "__main__":
        import uvicorn
        uvicorn.run(app, host="0.0.0.0", port=8000)