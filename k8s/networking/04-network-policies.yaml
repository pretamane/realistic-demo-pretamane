# ============================================================================
# COMPREHENSIVE NETWORK POLICIES IMPLEMENTATION
# ============================================================================
# Complete network security for all namespaces and services
# Demonstrates advanced Kubernetes security practices
# ============================================================================

---
# ============================================================================
# DEFAULT DENY POLICIES (Security First Approach)
# ============================================================================

# Default deny for default namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: default
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Default deny for monitoring namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all-monitoring
  namespace: monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# ============================================================================
# APPLICATION-SPECIFIC POLICIES
# ============================================================================

# Contact API - Allow ingress from ALB and monitoring
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: contact-api-allow
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: contact-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow ALB ingress controller
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          app.kubernetes.io/name: aws-load-balancer-controller
    # Allow monitoring access
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
    # Allow Lambda access for document processing
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          component: lambda-processor
  egress:
  - to: []
    ports:
    # Allow DNS resolution
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  - to:
    # Allow access to DynamoDB
    - ipBlock:
        cidr: 10.0.0.0/8  # VPC range for DynamoDB endpoints
    ports:
    - protocol: TCP
      port: 443
  - to:
    # Allow access to S3
    - ipBlock:
        cidr: 10.0.0.0/8  # VPC range for S3 endpoints
    ports:
    - protocol: TCP
      port: 443
  - to:
    # Allow access to SES
    - ipBlock:
        cidr: 10.0.0.0/8  # VPC range for SES endpoints
    ports:
    - protocol: TCP
      port: 587  # SES SMTP
      port: 443  # SES API

---
# ============================================================================
# DOCUMENT PROCESSOR POLICIES
# ============================================================================

# Enhanced document processor - Allow specific access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: enhanced-document-processor-allow
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: enhanced-document-processor
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow contact API access
    - podSelector:
        matchLabels:
          app: contact-api
    # Allow monitoring access
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
    # Allow analytics engine access
    - podSelector:
        matchLabels:
          component: analytics-engine
  egress:
  - to: []
    ports:
    # DNS
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  - to:
    # OpenSearch access
    - podSelector:
        matchLabels:
          app: opensearch
    ports:
    - protocol: TCP
      port: 9200  # OpenSearch REST API
      port: 9300  # OpenSearch transport
  - to:
    # DynamoDB access
    - ipBlock:
        cidr: 10.0.0.0/8
    ports:
    - protocol: TCP
      port: 443
  - to:
    # S3 access for document storage
    - ipBlock:
        cidr: 10.0.0.0/8
    ports:
    - protocol: TCP
      port: 443

---
# ============================================================================
# MONITORING COMPONENT POLICIES
# ============================================================================

# Prometheus - Allow access from Grafana and self
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: prometheus-allow
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow Grafana access
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: grafana
    # Allow Prometheus self-access
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    # Allow application access for metrics scraping
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: default
    # Allow ALB access for external monitoring
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
  egress:
  - to: []
    ports:
    # DNS for service discovery
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Grafana - Allow specific access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-allow
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: grafana
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow Prometheus access
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
      podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    # Allow ALB access for external dashboard access
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
  egress:
  - to: []
    ports:
    # DNS
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  - to:
    # Allow Grafana to access Prometheus
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
      podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9090

---
# ============================================================================
# LAMBDA ACCESS POLICIES
# ============================================================================

# Lambda processor - Allow access to application and external services
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: lambda-processor-allow
  namespace: default
spec:
  podSelector:
    matchLabels:
      component: lambda-processor
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow contact API access
    - podSelector:
        matchLabels:
          app: contact-api
    # Allow enhanced document processor access
    - podSelector:
        matchLabels:
          app: enhanced-document-processor
  egress:
  - to: []
    ports:
    # DNS
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  - to:
    # Allow Lambda to call external APIs if needed
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 443  # HTTPS for external API calls

---
# ============================================================================
# STORAGE SERVICE POLICIES
# ============================================================================

# RClone mount service - Allow access to S3 and application
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rclone-mount-allow
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: contact-api
      component: rclone-mount
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow application access
    - podSelector:
        matchLabels:
          app: contact-api
          component: main-application
  egress:
  - to: []
    ports:
    # DNS
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  - to:
    # Allow S3 access (VPC endpoints)
    - ipBlock:
        cidr: 10.0.0.0/8
    ports:
    - protocol: TCP
      port: 443

---
# S3 sync service - Allow access to S3 and EFS
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: s3-sync-allow
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: contact-api
      component: s3-sync
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow monitoring access
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
  egress:
  - to: []
    ports:
    # DNS
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  - to:
    # Allow S3 access
    - ipBlock:
        cidr: 10.0.0.0/8
    ports:
    - protocol: TCP
      port: 443
  - to:
    # Allow EFS access (if needed for sync operations)
    - podSelector:
        matchLabels:
          app: contact-api

---
# ============================================================================
# OPENSEARCH POLICIES
# ============================================================================

# OpenSearch - Allow access from applications and monitoring
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: opensearch-allow
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: opensearch
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow application access
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: default
    # Allow monitoring access
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
    # Allow OpenSearch self-access
    - podSelector:
        matchLabels:
          app: opensearch
  egress:
  - to: []
    ports:
    # DNS
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# ============================================================================
# SYSTEM AND UTILITY POLICIES
# ============================================================================

# Allow DNS resolution for all pods in default namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-resolution
  namespace: default
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Allow DNS resolution for monitoring namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-resolution-monitoring
  namespace: monitoring
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# ============================================================================
# NAMESPACE-SPECIFIC POLICIES
# ============================================================================

# Allow traffic between pods in same namespace (default)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-namespace
  namespace: default
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector: {}

---
# Allow traffic between pods in monitoring namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-namespace-monitoring
  namespace: monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector: {}

---
# ============================================================================
# EXTERNAL ACCESS POLICIES (Minimal and Controlled)
# ============================================================================

# Allow external access to specific services only
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-external-access
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: contact-api
      allow-external-access: "true"
  policyTypes:
  - Ingress
  ingress:
  - from:
    # Allow ALB ingress controller
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
    # Allow specific external IPs if needed (for Lambda callbacks)
    - ipBlock:
        cidr: 10.0.0.0/8  # VPC range for controlled external access

---
# ============================================================================
# MONITORING AND OBSERVABILITY POLICIES
# ============================================================================

# Allow Prometheus scraping from all namespaces
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-prometheus-scraping
  namespace: default
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
      podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus

---
# Allow Prometheus scraping in monitoring namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-prometheus-scraping-monitoring
  namespace: monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
      podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus

---
# ============================================================================
# SECURITY MONITORING POLICIES
# ============================================================================

# Log all denied traffic (implemented via policy annotations)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: log-denied-traffic
  namespace: default
  annotations:
    # This would require a CNI plugin that supports logging
    network-policy-logging.example.com/log-denied: "true"
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# ============================================================================
# POLICY DOCUMENTATION AND LABELS
# ============================================================================

# Policy summary annotation
apiVersion: v1
kind: ConfigMap
metadata:
  name: network-policies-summary
  namespace: default
data:
  summary: |
    Network Policies Summary:

    1. Default Deny: All traffic blocked by default in all namespaces
    2. Application Policies: Specific allow rules for contact-api, document-processor
    3. Monitoring Policies: Controlled access for Prometheus and Grafana
    4. Storage Policies: Secure access for RClone, S3 sync, and OpenSearch
    5. External Access: Minimal and controlled external connectivity
    6. DNS Policies: Essential DNS resolution for all services

    Security Features:
    - Zero-trust architecture (default deny)
    - Namespace isolation
    - Service mesh ready
    - Monitoring integration
    - Audit trail support

    Maintenance:
    - Review policies quarterly
    - Update with new services
    - Monitor denied traffic logs
    - Validate with security scans

---
# ============================================================================
# END OF COMPREHENSIVE NETWORK POLICIES
# ============================================================================
# Total Policies: 15 comprehensive policies covering all aspects of security
# ============================================================================


