# Service Mesh Testing and Validation
apiVersion: v1
kind: Pod
metadata:
  name: istio-test-client
  namespace: default
  labels:
    app: istio-test-client
spec:
  containers:
  - name: test-client
    image: curlimages/curl:latest
    command: ["/bin/sh"]
    args:
    - -c
    - |
      echo "Testing Service Mesh functionality..."
      
      # Test mTLS connectivity
      echo "Testing mTLS connectivity to contact-api..."
      curl -v http://contact-api-service:8000/health
      
      # Test rate limiting
      echo "Testing rate limiting..."
      for i in {1..10}; do
        curl -s http://contact-api-service:8000/health
        sleep 1
      done
      
      # Test circuit breaker
      echo "Testing circuit breaker..."
      curl -v http://contact-api-service:8000/health
      
      # Test authorization policies
      echo "Testing authorization policies..."
      curl -v http://enhanced-document-processor-service:8000/health
      
      echo "Service mesh testing completed!"
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
---
# Service Mesh Health Check Job
apiVersion: batch/v1
kind: Job
metadata:
  name: service-mesh-health-check
  namespace: default
spec:
  template:
    spec:
      containers:
      - name: health-check
        image: curlimages/curl:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Service Mesh Health Check"
          echo "========================"
          
          # Check Istio sidecar injection
          echo "Checking Istio sidecar injection..."
          kubectl get pods -l app=contact-api -o jsonpath='{.items[0].spec.containers[*].name}' | grep -q istio-proxy && echo "✓ Sidecar injected" || echo "✗ Sidecar not injected"
          
          # Check mTLS status
          echo "Checking mTLS status..."
          kubectl get peerauthentication -A
          
          # Check authorization policies
          echo "Checking authorization policies..."
          kubectl get authorizationpolicy -A
          
          # Check destination rules
          echo "Checking destination rules..."
          kubectl get destinationrule -A
          
          # Check virtual services
          echo "Checking virtual services..."
          kubectl get virtualservice -A
          
          # Check gateway configuration
          echo "Checking gateway configuration..."
          kubectl get gateway -A
          
          echo "Health check completed!"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      restartPolicy: Never
  backoffLimit: 3
---
# Service Mesh Performance Test
apiVersion: v1
kind: Pod
metadata:
  name: istio-performance-test
  namespace: default
  labels:
    app: istio-performance-test
spec:
  containers:
  - name: performance-test
    image: curlimages/curl:latest
    command: ["/bin/sh"]
    args:
    - -c
    - |
      echo "Service Mesh Performance Test"
      echo "============================="
      
      # Test request latency
      echo "Testing request latency..."
      for i in {1..5}; do
        start_time=$(date +%s%N)
        curl -s http://contact-api-service:8000/health > /dev/null
        end_time=$(date +%s%N)
        latency=$(( (end_time - start_time) / 1000000 ))
        echo "Request $i latency: ${latency}ms"
      done
      
      # Test throughput
      echo "Testing throughput..."
      start_time=$(date +%s)
      for i in {1..100}; do
        curl -s http://contact-api-service:8000/health > /dev/null &
      done
      wait
      end_time=$(date +%s)
      duration=$((end_time - start_time))
      echo "100 requests completed in ${duration} seconds"
      
      echo "Performance test completed!"
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
